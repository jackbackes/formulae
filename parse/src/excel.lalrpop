use std::str::FromStr;
use crate::ast::{Expr, Opcode}; 

grammar;

Tier<Op,NextTier>: Box<Expr> = {
    Tier<Op,NextTier> Op NextTier => Box::new(Expr::Op(<>)),
    NextTier
};

pub Expr = Tier<ExprOp, Factor>;
Factor = Tier<FactorOp, SingleComparison>;
SingleComparison = Tier<SingleComparisonOp, MultiComparison>; 
MultiComparison = Tier<MultiComparisonOp, Term>; 

ExprOp: Opcode = { 
    "+" => Opcode::Add,
    "-" => Opcode::Subtract,
};

FactorOp: Opcode = {
    "*" => Opcode::Multiply,
    "/" => Opcode::Divide,
	"^" => Opcode::Exponent,
	"&" => Opcode::Concat,
	"%" => Opcode::Percent,
};

SingleComparisonOp: Opcode = {
	"=" => Opcode::Equal, 
	"<" => Opcode::LessThan,
	">" => Opcode::GreaterThan,
}; 

MultiComparisonOp: Opcode = {
	"<>" => Opcode::NotEqual,
	"<=" => Opcode::LessThanOrEqual,
	">=" => Opcode::GreatThanOrEqual 
}; 

Term: Box<Expr> = {
    Num => Box::new(Expr::Num(<>)),
	Str => Box::new(Expr::Str(<>)), 
    "(" <Expr> ")"
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};

Str: String = {
	r"[a-zA-Z]+" => (<>).to_string()
}
